FORMAT: 1A
HOST: https://resapi.herokuapp.com/api


# Yummy Recipes API Documentation

Yummy recipes provides a platform for users to keep track of their awesome recipes and share with others if they so wish. To test this API live on heroku follow this [link.](https://sylvance.docs.apiary.io/)

## Authentication
This API uses OAuth v2 Bearer Token / Personal Access Token for its authentication.

# Group Users

## Users [/users]

### Sign up a user [POST]

Create a new User with [username, password, email, bio] fields. The username must not be a space. The password 6 characters long. All fields must be valid for their type.

+ Request (application/json)
    + Attributes (Sign up usersRequest)

    + Body

            {
                "username": "Sylvance",
                "first_name": "Sylvance",
                "last_name": "Kerandi",
                "email": "kerandisylvance@gmail.com",
                "password": "starwars"
            }

+ Response 201 (application/json)

        {
            "message": "Successfully signed up",
            "status": "Success",
            "status code": "201"
        }

+ Response 400 (application/json)

        {
            "message": "Failed to decode JSON object: Expecting property name enclosed in double quotes: line %s column %s (char %s)"
        }

+ Response 403 (application/json)
        
        {
            "status": "Fail",
            "status code": 403,
            "message": "Wrong email or password"
        }

+ Response 409 (application/json)

        {
            "status": "Fail",
            "status code": 409,
            "message": "User already exists"
        }

## User Sign In [/users/signin]

### Sign in a user [POST]

Sign in a new User with [email, password] fields. The username must not be a space(s). The password 6 characters long. All fields must be valid for their type.

+ Request (application/json)
    + Attributes (Sign in userRequest)

    + Body

            {
                "email": "user@gmail.com",
                "password": "waroftitans"
            }

+ Response 200 (application/json)

        {
            "status": "Success",
            "status code": 200,
            "message": "User has signed in.",
            "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MjAxNTc3NjcsImlhdCI6MTUxNzU2MjE2Nywic3ViIjoyfQ.Wtn-0s8KC7BNcF38cdbC2LNt1ZpQD0DkE-2Nfzub-rY"
        }

+ Response 400 (application/json)

        {
            "message": "Failed to decode JSON object: Expecting property name enclosed in double quotes: line %s column %s (char %s)"
        }

+ Response 401 (application/json)

        {
            "status": "Fail",
            "status code": 401,
            "message": "User does not exist or incorrect password."
        }

+ Response 401 (application/json)
        
        {
            "status": "Fail",
            "status code": 401,
            "message": "Wrong email or password"
        }

## User Sign Out [/users/signout]

### Sign out a user [GET]

Sign out a User with [email, password] fields. The username must not be a space(s). The password 6 characters long. All fields must be valid for their type.

+ Request (application/json)

    + Headers

            Authorization: Bearer JWT Token

+ Response 200 (application/json)

        {
            "status": "Success",
            "status code": 200,
            "message": "Successfully logged out"
        }

+ Response 400 (application/json)

        {
            "message": "Failed to decode JSON object: Expecting property name enclosed in double quotes: line %s column %s (char %s)"
        }

+ Response 405 (application/json)

        {
            "message": "The method is not allowed for the requested URL."
        }

# Group Categories

## Categories [/users/{id}/categories]

### List all available categories [GET]

Get a list of all available categories. A user must be logged in to access this route. The response is in json format

+ Parameters
    + id - A path variable for users id that is required for a valid URL

+ Request (application/json)


    + Headers

            Authorization: Bearer JWT Token

+ Response 200 (application/json)

        []

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "categorytitle": "Kenyan Dishes",
                "categorydescription": "Dishes Made in Kenya",
                "user_id": 1,
                "created_at": "Wed, 20 Dec 2017 17:28:54 -0000",
                "modified_at": "Wed, 20 Dec 2017 17:28:54 -0000"
            },
            {
                "id": 2,
                "categorytitle": "Indian Dishes",
                "categorydescription": "Dishes Made in India",
                "user_id": 1,
                "created_at": "Wed, 20 Dec 2017 17:29:24 -0000",
                "modified_at": "Wed, 20 Dec 2017 17:29:24 -0000"
            },
            {
                "id": 3,
                "categorytitle": "Indiana Dishes",
                "categorydescription": "Dishes Made in Indiana",
                "user_id": 1,
                "created_at": "Wed, 20 Dec 2017 23:18:48 -0000",
                "modified_at": "Wed, 20 Dec 2017 23:18:48 -0000"
            },
            {
                "id": 4,
                "categorytitle": "Indonesia Dishes",
                "categorydescription": "Dishes Made in Indonesia",
                "user_id": 1,
                "created_at": "Wed, 20 Dec 2017 23:19:33 -0000",
                "modified_at": "Wed, 20 Dec 2017 23:19:33 -0000"
            }
        ]

### Create a new category to the list. [POST]

Create a new category to the list and respond with the newly created category. Category must not be existing for the current user.

+ Request (application/json)
    + Attributes (Create a new categoryRequest)

    + Headers

            Authorization: Bearer JWT Token
    + Body
            
            {
                "title": "Kenyan",
                "description": "Dishes"
            }

+ Response 201 (application/json)
    + Attributes (Create a new categoryResponse)

    + Body

            {
                "id": 3,
                "user_id": 1,
                "title": "Kenyan",
                "description": "Dishes",
                "created_at": "Mon, 29 Jan 2018 19:36:07 -0000",
                "modified_at": "Mon, 29 Jan 2018 19:36:07 -0000"
            }

# Group Recipes

## Recipes [/categories/{category_id}/recipes]

### List all available recipes [GET]

Get a list of all available recipes. A user must be logged in to access this route. The response is in json format

+ Parameters
    + category_id - A path variable for category id that is required for a valid URL

+ Request (application/json)


    + Headers

            Authorization: Bearer JWT Token

+ Response 200 (application/json)
    + Attributes (Get all recipes in a categoryResponse)

    + Body

            {
                "items": [],
                "meta": {
                    "page": 1,
                    "limit": 3,
                    "total": 0,
                    "pages": 0,
                    "links": {
                        "prev": null,
                        "next": null,
                        "first": "/api/categories/2/recipes?page=1&limit=3",
                        "last": "/api/categories/2/recipes?page=0&limit=3"
                    }
                }
            }

### Create a new recipe to the list. [POST]

Create a new recipe to the list and respond with the newly created recipe. Recipe must not be existing for the current category.

+ Parameters
    + category_id - A path variable for category id that is required for a valid URL

+ Request (application/json)
    + Attributes (Create a new recipeRequest)


    + Headers

            Authorization: Bearer JWT Token
    + Body
            
            {
                "category_id": 2,
                "title": "uji",
                "description": "white"
            }

+ Response 201 (application/json)
    + Attributes (Create a new recipeResponse)

    + Body

            {
                "id": 3,
                "category_id": 2,
                "title": "uji",
                "description": "white",
                "created_at": "Mon, 29 Jan 2018 19:52:49 -0000",
                "modified_at": "Mon, 29 Jan 2018 19:52:49 -0000"
            }

# Group Single Category

## Single Category [/users/{user_id}/categories/{category_id}]

### Get a single category by id [GET]

Get a single category. A user must be logged in to access this route. The response is in json format

+ Parameters
    + user_id - A path variable for user id that is required for a valid URL
    + category_id - A path variable for category id that is required for a valid URL

+ Request (application/json)


    + Headers

            Authorization: Bearer JWT Token

+ Response 200 (application/json)
    + Attributes (Get category by idResponse)

    + Body

            {
                "id": 1,
                "user_id": 1,
                "title": "Kenyan",
                "description": "Dishes",
                "created_at": "Mon, 29 Jan 2018 19:21:30 -0000",
                "modified_at": "Mon, 29 Jan 2018 19:21:30 -0000"
            }

### Update a single category by id [POST]

Update a single category. A user must be logged in to access this route. The response is in json format

+ Parameters
    + user_id - A path variable for user id that is required for a valid URL
    + category_id - A path variable for category id that is required for a valid URL

+ Request (application/json)
    + Attributes (Update category by idRequest)


    + Headers

            Authorization: Bearer JWT Token

    + Body

            {
                "title": "Tanzanian",
                "description": "Dishes"
            }

+ Response 200 (application/json)
    + Attributes (Update category by idResponse)

    + Body

            {
                "id": 1,
                "user_id": 1,
                "title": "Tanzanian",
                "description": "Dishes",
                "created_at": "Mon, 29 Jan 2018 19:21:30 -0000",
                "modified_at": "Mon, 29 Jan 2018 19:31:41 -0000"
            }

### Remove a single category by id [DELETE]

Remove a single category. A user must be logged in to access this route. The response is in json format

+ Parameters
    + user_id - A path variable for user id that is required for a valid URL
    + category_id - A path variable for category id that is required for a valid URL

+ Request (application/json)


    + Headers

            Authorization: Bearer JWT Token

+ Response 200 (application/json)

        {
            "message": "Delete category success",
            "status": "Success",
            "status code": "200"
        }

# Group Single Recipes

## Single Recipe [/categories/{category_id}/recipes/{recipe_id}]

### Get a single recipe by id [GET]

Get a single recipe. A user must be logged in to access this route. The response is in json format

+ Parameters
    + category_id - A path variable for category id that is required for a valid URL
    + recipe_id - A path variable for recipe id that is required for a valid URL

+ Request (application/json)


    + Headers

            Authorization: Bearer JWT Token

+ Response 200 (application/json)
    + Attributes (Get recipe by idResponse)

    + Body

            {
                "id": 3,
                "category_id": 2,
                "title": "uji",
                "description": "white",
                "created_at": "Mon, 29 Jan 2018 19:52:49 -0000",
                "modified_at": "Mon, 29 Jan 2018 19:52:49 -0000"
            }

### Update a single recipe by id [POST]

Update a single recipe. A user must be logged in to access this route. The response is in json format

+ Parameters
    + category_id - A path variable for category id that is required for a valid URL
    + recipe_id - A path variable for recipe id that is required for a valid URL

+ Request (application/json)
    + Attributes (Update recipe by idRequest)


    + Headers

            Authorization: Bearer JWT Token

    + Body

            {
                "title": "porridge",
                "description": "brown"
            }

+ Response 200 (application/json)
    + Attributes (Update recipe by idResponse)

    + Body

            {
                "id": 3,
                "category_id": 2,
                "title": "porridge",
                "description": "brown",
                "created_at": "Mon, 29 Jan 2018 19:52:49 -0000",
                "modified_at": "Mon, 29 Jan 2018 20:00:43 -0000"
            }

### Remove a single recipe by id [DELETE]

Remove a single recipe. A user must be logged in to access this route. The response is in json format

+ Parameters
    + category_id - A path variable for category id that is required for a valid URL
    + recipe_id - A path variable for recipe id that is required for a valid URL

+ Request (application/json)


    + Headers

            Authorization: Bearer JWT Token

+ Response 201 (application/json)

        {
            "message": "Delete recipe success",
            "status": "Success",
            "status code": "201"
        }


# Data Structures

## Sign up usersRequest (object)


### Properties
+ `username`: `Sylvance` (string, required) 
+ `first_name`: `Sylvance` (string, required) 
+ `last_name`: `Kerandi` (string, required) 
+ `email`: `kerandisylvance@gmail.com` (string, required) 
+ `password`: `starwars` (string, required) 


## Sign in userRequest (object)


### Properties
+ `email`: `kerandisylvance@gmail.com` (string, required) 
+ `password`: `starwars` (string, required) 


## Create a new categoryRequest (object)


### Properties
+ `title`: `Kenyan` (string, required) 
+ `description`: `Dishes` (string, required) 


## Create a new categoryResponse (object)


### Properties
+ `id`: `3` (number, required) 
+ `user_id`: `1` (number, required) 
+ `title`: `Kenyan` (string, required) 
+ `description`: `Dishes` (string, required) 
+ `created_at`: `Mon, 29 Jan 2018 19:36:07 -0000` (string, required) 
+ `modified_at`: `Mon, 29 Jan 2018 19:36:07 -0000` (string, required) 


## Get category by idResponse (object)


### Properties
+ `id`: `1` (number, required) 
+ `user_id`: `1` (number, required) 
+ `title`: `Kenyan` (string, required) 
+ `description`: `Dishes` (string, required) 
+ `created_at`: `Mon, 29 Jan 2018 19:21:30 -0000` (string, required) 
+ `modified_at`: `Mon, 29 Jan 2018 19:21:30 -0000` (string, required) 


## Update category by idRequest (object)


### Properties
+ `title`: `Tanzanian` (string, required) 
+ `description`: `Dishes` (string, required) 


## Update category by idResponse (object)


### Properties
+ `id`: `1` (number, required) 
+ `user_id`: `1` (number, required) 
+ `title`: `Tanzanian` (string, required) 
+ `description`: `Dishes` (string, required) 
+ `created_at`: `Mon, 29 Jan 2018 19:21:30 -0000` (string, required) 
+ `modified_at`: `Mon, 29 Jan 2018 19:31:41 -0000` (string, required) 


## Get all recipes in a categoryResponse (object)


### Properties
+ `items`: `[]` (array[string], required) 
+ `meta`: `[]` (Meta, required) 


## Meta (object)


### Properties
+ `page`: `1` (number, required) 
+ `limit`: `3` (number, required) 
+ `total`: `0` (number, required) 
+ `pages`: `0` (number, required) 
+ `links`: `0` (Links, required) 


## Links (object)


### Properties
+ `prev` (string, required, nullable) 
+ `next` (string, required, nullable) 
+ `first`: `/api/categories/2/recipes?page=1&limit=3` (string, required) 
+ `last`: `/api/categories/2/recipes?page=0&limit=3` (string, required) 


## Create a new recipeRequest (object)


### Properties
+ `category_id`: `2` (number, required) 
+ `title`: `uji` (string, required) 
+ `description`: `white` (string, required) 


## Create a new recipeResponse (object)


### Properties
+ `id`: `3` (number, required) 
+ `category_id`: `2` (number, required) 
+ `title`: `uji` (string, required) 
+ `description`: `white` (string, required) 
+ `created_at`: `Mon, 29 Jan 2018 19:52:49 -0000` (string, required) 
+ `modified_at`: `Mon, 29 Jan 2018 19:52:49 -0000` (string, required) 


## Get recipe by idResponse (object)


### Properties
+ `id`: `3` (number, required) 
+ `category_id`: `2` (number, required) 
+ `title`: `uji` (string, required) 
+ `description`: `white` (string, required) 
+ `created_at`: `Mon, 29 Jan 2018 19:52:49 -0000` (string, required) 
+ `modified_at`: `Mon, 29 Jan 2018 19:52:49 -0000` (string, required) 


## Update recipe by idRequest (object)


### Properties
+ `title`: `porridge` (string, required) 
+ `description`: `brown` (string, required) 


## Update recipe by idResponse (object)


### Properties
+ `id`: `3` (number, required) 
+ `category_id`: `2` (number, required) 
+ `title`: `porridge` (string, required) 
+ `description`: `brown` (string, required) 
+ `created_at`: `Mon, 29 Jan 2018 19:52:49 -0000` (string, required) 
+ `modified_at`: `Mon, 29 Jan 2018 20:00:43 -0000` (string, required)